{"ast":null,"code":"import React from \"react\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Numeral = _ref => {\n  let {\n    value\n  } = _ref;\n  let newValue = value.toString();\n\n  if (value >= 1000) {\n    let suffixes = [\"\", \"K\", \"M\", \"B\", \"T\"];\n    let suffixNum = Math.floor((\"\" + value).length / 3);\n    let shortValue = 0;\n    let shortValueStr = '';\n\n    for (let precision = 2; precision >= 1; precision--) {\n      shortValue = parseFloat((suffixNum != 0 ? value / Math.pow(1000, suffixNum) : value).toPrecision(precision));\n      var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g, '');\n\n      if (dotLessShortValue.length <= 2) {\n        break;\n      }\n    }\n\n    if (shortValue % 1 != 0) shortValueStr = shortValue.toFixed(1);\n    newValue = shortValue + suffixes[suffixNum];\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: newValue\n  }, void 0, false);\n};\n_c = Numeral;\n\nvar _c;\n\n$RefreshReg$(_c, \"Numeral\");","map":{"version":3,"names":["React","Numeral","value","newValue","toString","suffixes","suffixNum","Math","floor","length","shortValue","shortValueStr","precision","parseFloat","pow","toPrecision","dotLessShortValue","replace","toFixed"],"sources":["/Users/abahdir/Desktop/ft_transcendence/frontend/src/views/components/numeral/numeral.tsx"],"sourcesContent":["import React from \"react\";\n\nexport const Numeral:React.FC<{value: number}> = ({value}) => {\n    let newValue: string = value.toString();\n    if (value >= 1000) {\n        let suffixes: Array<string> = [\"\", \"K\", \"M\", \"B\",\"T\"];\n        let suffixNum: number = Math.floor( (\"\"+value).length/3 );\n        let shortValue: number = 0;\n        let shortValueStr: string = '';\n        for (let precision : number = 2; precision >= 1; precision--) {\n            shortValue = parseFloat((suffixNum != 0 ? (value / Math.pow(1000,suffixNum) ) : value).toPrecision(precision));\n            var dotLessShortValue = (shortValue + '').replace(/[^a-zA-Z 0-9]+/g,'');\n            if (dotLessShortValue.length <= 2) { break; }\n        }\n        if (shortValue % 1 != 0)  shortValueStr = shortValue.toFixed(1);\n            newValue = shortValue+suffixes[suffixNum];\n    }\n    return (<>{newValue}</>);\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,OAAO,MAAMC,OAAiC,GAAG,QAAa;EAAA,IAAZ;IAACC;EAAD,CAAY;EAC1D,IAAIC,QAAgB,GAAGD,KAAK,CAACE,QAAN,EAAvB;;EACA,IAAIF,KAAK,IAAI,IAAb,EAAmB;IACf,IAAIG,QAAuB,GAAG,CAAC,EAAD,EAAK,GAAL,EAAU,GAAV,EAAe,GAAf,EAAmB,GAAnB,CAA9B;IACA,IAAIC,SAAiB,GAAGC,IAAI,CAACC,KAAL,CAAY,CAAC,KAAGN,KAAJ,EAAWO,MAAX,GAAkB,CAA9B,CAAxB;IACA,IAAIC,UAAkB,GAAG,CAAzB;IACA,IAAIC,aAAqB,GAAG,EAA5B;;IACA,KAAK,IAAIC,SAAkB,GAAG,CAA9B,EAAiCA,SAAS,IAAI,CAA9C,EAAiDA,SAAS,EAA1D,EAA8D;MAC1DF,UAAU,GAAGG,UAAU,CAAC,CAACP,SAAS,IAAI,CAAb,GAAkBJ,KAAK,GAAGK,IAAI,CAACO,GAAL,CAAS,IAAT,EAAcR,SAAd,CAA1B,GAAuDJ,KAAxD,EAA+Da,WAA/D,CAA2EH,SAA3E,CAAD,CAAvB;MACA,IAAII,iBAAiB,GAAG,CAACN,UAAU,GAAG,EAAd,EAAkBO,OAAlB,CAA0B,iBAA1B,EAA4C,EAA5C,CAAxB;;MACA,IAAID,iBAAiB,CAACP,MAAlB,IAA4B,CAAhC,EAAmC;QAAE;MAAQ;IAChD;;IACD,IAAIC,UAAU,GAAG,CAAb,IAAkB,CAAtB,EAA0BC,aAAa,GAAGD,UAAU,CAACQ,OAAX,CAAmB,CAAnB,CAAhB;IACtBf,QAAQ,GAAGO,UAAU,GAACL,QAAQ,CAACC,SAAD,CAA9B;EACP;;EACD,oBAAQ;IAAA,UAAGH;EAAH,iBAAR;AACH,CAhBM;KAAMF,O"},"metadata":{},"sourceType":"module"}