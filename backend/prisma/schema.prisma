
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  username      String @unique
  email         String  @unique
  fullName      String?
  profileUrl    String?
  imageUrl      String

  refresh_token String?
  isTfaEnabled  Boolean? @default(false)
  tfaSecret     String? @default("")

  score         Int? @default(0)   // updated when a game is played
  rank          Int?
  status        String?            // "online", "offline", "in a game" ...

  wins          Int? @default(0)
  loses         Int? @default(0)

  sentReq       FriendReq[] @relation("sent")
  recievedReq   FriendReq[] @relation("received")

  messages      Message[]
  user_rooms    UserRoom[]

  user_games    UserGame[]

  @@map("users")
  @@unique([id, tfaSecret])
}

model FriendReq {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  snd_id      String    // who sent the request
  rcv_id      String    // who received the request
  status      String    // accepted, pending, blocked

  sender      User @relation("sent",fields: [snd_id], references: [id], onDelete: Cascade)
  receiver    User @relation("received",fields: [rcv_id], references: [id], onDelete: Cascade)

  @@id([snd_id, rcv_id])
  @@map("friend_requests")
}

model Room {
  id          String @id @default(cuid())
  name        String?
  is_channel  Boolean
  type        String? @default("PUBLIC") // PRIVATE, PUBLIC, PROTECTED
  password    String?

  messages    Message[]
  user_rooms  UserRoom[]

  @@map("rooms")
}

model Message {
  id        String @id @default(cuid())
  timestamp DateTime @default(now())

  uid       String
  user      User  @relation(fields: [uid], references: [id], onDelete: Cascade)

  rid       String
  room      Room @relation(fields: [rid], references: [id], onDelete: Cascade)

  msg       String

  // is_deleted Boolean @default(false)

  @@map("messages")
}

model UserRoom {
  id            String @id @default(cuid())
  joined_time   DateTime @default(now())
  
  uid           String
  user          User  @relation(fields: [uid], references: [id], onDelete: Cascade)

  rid           String
  room          Room @relation(fields: [rid], references: [id], onDelete: Cascade)

  is_owner      Boolean @default(false)
  is_admin      Boolean @default(false)
  is_banned     Boolean @default(false)
  
  is_muted      Boolean @default(false)
  unmute_at     DateTime?

  @@unique([uid, rid])
  @@map("user_rooms")
}

model Game {
  id          String @id @default(cuid())
  createdAt   DateTime @default(now())

  map       String

  user_game UserGame[]

  @@map("games")
}

model UserGame {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())

  uid       String
  user      User @relation(fields: [uid], references: [id], onDelete: Cascade)

  gid       String
  room      Game @relation(fields: [gid], references: [id], onDelete: Cascade)

  is_player Boolean
  score     Int

  @@unique([uid, gid])
  @@map("user_games")
}
