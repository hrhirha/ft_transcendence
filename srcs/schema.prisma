
generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  setup         Boolean @default(false)

  username      String @unique
  email         String @unique
  fullName      String?
  imageUrl      String

  isTfaEnabled  Boolean? @default(false)
  tfaSecret     String? @default("")

  score         Int? @default(0)            // updated when a game is played
  status        String? @default("OFFLINE") // "online", "offline", "in a game" ...

  wins          Int? @default(0)
  loses         Int? @default(0)

  sentReq       FriendReq[] @relation("sent")
  recievedReq   FriendReq[] @relation("received")

  messages      Message[]
  user_rooms    UserRoom[]

  user_games    UserGame[]

  rank_id       String
  rank          Rank @relation(fields: [rank_id], references: [id])

  @@map("users")
  @@unique([id, isTfaEnabled])
}

model Rank {
  id      String  @id @default(cuid())
  title   String  @unique @default("Wood")
  icon    String  @unique
  field   String  @unique
  require Int     @default(0)
  user    User[]

  @@map("ranks")
}

model FriendReq {
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  snd_id      String    // who sent the request
  rcv_id      String    // who received the request
  status      String    // accepted, pending, blocked

  sender      User @relation("sent",fields: [snd_id], references: [id], onDelete: Cascade)
  receiver    User @relation("received",fields: [rcv_id], references: [id], onDelete: Cascade)

  @@id([snd_id, rcv_id])
  @@map("friend_requests")
}

model Room {
  id          String @id @default(cuid())
  name        String?
  is_channel  Boolean
  type        String? @default("PUBLIC") // PRIVATE, PUBLIC, PROTECTED
  password    String?

  lst_msg     String? @default("")
  lst_msg_ts  DateTime?
  lst_msg_snd String?

  messages    Message[]
  user_rooms  UserRoom[]

  @@map("rooms")
}

model Message {
  id        String @id @default(cuid())
  timestamp DateTime @default(now())

  uid       String
  user      User  @relation(fields: [uid], references: [id], onDelete: Cascade)

  rid       String
  room      Room @relation(fields: [rid], references: [id], onDelete: Cascade)

  msg       String
  type      String

  // is_deleted Boolean @default(false)

  @@map("messages")
}

model UserRoom {
  id            String @id @default(cuid())
  joined_time   DateTime @default(now())
  
  uid           String
  user          User  @relation(fields: [uid], references: [id], onDelete: Cascade)

  rid           String
  room          Room @relation(fields: [rid], references: [id], onDelete: Cascade)

  is_owner      Boolean @default(false)
  is_admin      Boolean @default(false)

  is_banned     Boolean @default(false)
  // bans          UserBan[]
  
  is_muted      Boolean @default(false)
  unmute_at     DateTime?

  unread        Int? @default(0)

  @@unique([uid, rid])
  @@map("user_rooms")
}

model Game {
  id          String @id @default(cuid())
  createdAt   DateTime @default(now())

  map         String
  is_ultimate Boolean @default(false)
  ongoing     Boolean @default(true)

  user_game UserGame[]

  @@map("games")
}

model UserGame {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())

  uid       String
  user      User @relation(fields: [uid], references: [id], onDelete: Cascade)

  gid       String
  game      Game @relation(fields: [gid], references: [id], onDelete: Cascade)

  score     Int @default(0)

  @@unique([uid, gid])
  @@map("user_games")
}

// model UserBan {
//   id    String @id @default(cuid())
//   uid   String
//   rid   String
//   ur    UserRoom @relation(fields: [uid,rid], references: [uid, rid], onDelete: Cascade)
  
//   start DateTime
//   end   DateTime?

//   @@unique([id, uid, rid])
//   @@map("user_bans")
// }
