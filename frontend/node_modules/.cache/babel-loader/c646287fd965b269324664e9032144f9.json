{"ast":null,"code":"import io from \"socket.io-client\";\nexport class Socket {\n  constructor() {\n    this.socket = void 0;\n    this.socket = io(\"ws://127.0.0.1:3001/chat\", {\n      withCredentials: true\n    });\n  }\n\n  get_chats() {\n    this.socket.emit(\"get_chats\");\n  }\n\n  create_room(info_room) {\n    if (info_room.name.length === 0) return new Error(\"error : name must not be empty\");\n    if (info_room.uids.length === 0) return new Error(\"error : number of users must be greater than 0\");\n    this.socket.emit(\"create_room\", info_room);\n  }\n\n  delete_room(info_room) {\n    if (info_room.id.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"delete_room\", info_room);\n  }\n\n  start_dm(id) {\n    this.socket.emit(\"start_dm\", {\n      id\n    });\n  }\n\n  join_room(info_room) {\n    if (info_room.id.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"join_room\", info_room);\n  }\n\n  leave_room(info_room) {\n    if (info_room.id.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"leave_room\", info_room);\n  }\n\n  add_member(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    this.socket.emit(\"add_member\", member);\n  }\n\n  remove_member(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    this.socket.emit(\"remove_member\", member);\n  }\n\n  ban_user(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    this.socket.emit(\"ban_user\", member);\n  }\n\n  unban_user(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    this.socket.emit(\"unban_user\", member);\n  }\n\n  mute_user(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    if (member.mute_period !== \"15M\" && member.mute_period !== \"1H\" && member.mute_period !== \"24H\" && member.mute_period !== \"3H\" && member.mute_period !== \"inf\" && member.mute_period !== \"8H\") return new Error(\"error : mute_period inco\");\n    this.socket.emit(\"mute_user\", member);\n  }\n\n  unmute_user(member) {\n    if (member.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (member.uid.length === 0) return new Error(\"error : uid must not be empty\");\n    this.socket.emit(\"unmute_user\", member);\n  }\n\n  send_message(msg) {\n    if (msg.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    this.socket.emit(\"send_message\", msg);\n  }\n\n  delete_message(info_msg) {\n    if (info_msg.id.length === 0) return new Error(\"error : id must not be empty\");\n    if (info_msg.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    this.socket.emit(\"delete_message\", info_msg);\n  }\n\n  get_members(info_room) {\n    if (info_room.id.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"get_members\", info_room);\n  }\n\n  get_messages(info_room) {\n    if (info_room.id.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"get_messages\", info_room);\n  }\n\n  set_password(set_password) {\n    if (set_password.id.length === 0) return new Error(\"error : id must not be empty\");\n    if (set_password.new_password.length < 8) return new Error(\"error : new_password must not be empty\");\n    this.socket.emit(\"set_password\", set_password);\n  }\n\n  change_password(change_password) {\n    if (change_password.id.length === 0) return new Error(\"error : id must not be empty\");\n    if (change_password.new_password.length < 8) return new Error(\"error : new_password must not be empty\");\n    if (change_password.old_password.length < 8) return new Error(\"error : new_password must not be empty\");\n    this.socket.emit(\"change_password\", change_password);\n  }\n\n  remove_password(remove_password) {\n    if (remove_password.id.length === 0) return new Error(\"error : id must not be empty\");\n    if (remove_password.old_password.length < 8) return new Error(\"error : new_password must not be empty\");\n    this.socket.emit(\"remove_password\", remove_password);\n  }\n\n  add_admin(add_admin) {\n    if (add_admin.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (add_admin.uid.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"add_admin\", add_admin);\n  }\n\n  remove_admin(remove_admin) {\n    if (remove_admin.rid.length === 0) return new Error(\"error : rid must not be empty\");\n    if (remove_admin.uid.length === 0) return new Error(\"error : id must not be empty\");\n    this.socket.emit(\"remove_admin\", remove_admin);\n  }\n\n}","map":{"version":3,"names":["io","Socket","constructor","socket","withCredentials","get_chats","emit","create_room","info_room","name","length","Error","uids","delete_room","id","start_dm","join_room","leave_room","add_member","member","rid","uid","remove_member","ban_user","unban_user","mute_user","mute_period","unmute_user","send_message","msg","delete_message","info_msg","get_members","get_messages","set_password","new_password","change_password","old_password","remove_password","add_admin","remove_admin"],"sources":["/goinfre/abahdir/ft_transcendence/frontend/src/socket/index.ts"],"sourcesContent":["import io from \"socket.io-client\";\n\ninterface info_create_room {\n    name:  string,\n    is_private? : boolean,\n    password?: string,\n    uids: string[],\n}\n\ninterface info_management_room {\n    id:  string,\n    password? : string,\n}\n\ninterface info_management_member {\n    uid:  string,\n    rid : string,\n}\n\ninterface info_send_msg {\n    rid:  string,\n    msg : string,\n}\n\ninterface info_mute_user {\n    uid:  string,\n    rid : string,\n    mute_period: string,\n}\n\ninterface info_delete_msg {\n    id:  string,\n    rid : string,\n}\n\ninterface set_password {\n    id:  string,\n    new_password : string,\n}\n\ninterface change_password {\n    id:  string,\n    new_password : string,\n    old_password : string,\n}\n\ninterface remove_password {\n    id:  string,\n    old_password : string,\n}\n\nexport class Socket {\n    socket :any;\n    constructor() {\n        this.socket = io(\"ws://127.0.0.1:3001/chat\",{\n            withCredentials: true\n        });\n    }\n\n    get_chats() {\n        this.socket.emit(\"get_chats\");\n    }\n\n    create_room(info_room : info_create_room) {\n        if(info_room.name.length === 0)\n            return new Error(\"error : name must not be empty\");\n        if(info_room.uids.length === 0)\n            return new Error(\"error : number of users must be greater than 0\");\n        this.socket.emit(\"create_room\", info_room);\n    }\n\n    delete_room(info_room : info_management_room) {\n        if(info_room.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"delete_room\", info_room);\n    }\n\n    start_dm(id: string) {\n        this.socket.emit(\"start_dm\", {id});\n    }\n\n    join_room(info_room : info_management_room) {\n        if(info_room.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"join_room\", info_room);\n    }\n\n    leave_room(info_room : info_management_room) {\n        if(info_room.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"leave_room\", info_room);\n    }\n\n    add_member(member :info_management_member) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        this.socket.emit(\"add_member\", member);\n    }\n\n    remove_member(member :info_management_member) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        this.socket.emit(\"remove_member\", member);\n    }\n\n    ban_user(member :info_management_member) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        this.socket.emit(\"ban_user\", member);\n    }\n\n    unban_user(member :info_management_member) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        this.socket.emit(\"unban_user\", member);\n    }\n\n    mute_user(member : info_mute_user) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        if(member.mute_period !== \"15M\" && member.mute_period  !== \"1H\" &&\n           member.mute_period !== \"24H\" && member.mute_period  !== \"3H\" &&\n           member.mute_period !== \"inf\" && member.mute_period  !== \"8H\")\n            return new Error(\"error : mute_period inco\");\n        this.socket.emit(\"mute_user\", member);\n    }\n\n    unmute_user(member :info_management_member) {\n        if(member.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(member.uid.length === 0)\n            return new Error(\"error : uid must not be empty\");\n        this.socket.emit(\"unmute_user\", member);\n    }\n\n    send_message(msg :info_send_msg) {\n        if(msg.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        this.socket.emit(\"send_message\", msg);\n    }\n\n    delete_message(info_msg : info_delete_msg) {\n        if(info_msg.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        if(info_msg.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        this.socket.emit(\"delete_message\", info_msg);\n    }\n\n\n    get_members(info_room : info_management_room) {\n        if(info_room.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"get_members\", info_room);\n        \n    }\n\n    get_messages(info_room : info_management_room) {\n        if(info_room.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"get_messages\", info_room);\n    }\n\n    set_password(set_password : set_password) {\n        if(set_password.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        if(set_password.new_password.length < 8 )\n            return new Error(\"error : new_password must not be empty\");\n        this.socket.emit(\"set_password\", set_password);\n    }\n\n    change_password(change_password : change_password) {\n        if(change_password.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        if(change_password.new_password.length < 8 )\n            return new Error(\"error : new_password must not be empty\");\n        if(change_password.old_password.length < 8 )\n            return new Error(\"error : new_password must not be empty\");\n        this.socket.emit(\"change_password\", change_password);\n    }\n    \n    remove_password(remove_password : remove_password) {\n        if(remove_password.id.length === 0)\n            return new Error(\"error : id must not be empty\");\n        if(remove_password.old_password.length < 8 )\n            return new Error(\"error : new_password must not be empty\");\n        this.socket.emit(\"remove_password\", remove_password);\n    }\n\n    add_admin(add_admin : info_management_member) {\n        if(add_admin.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(add_admin.uid.length === 0 )\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"add_admin\", add_admin);\n    }\n    \n    remove_admin(remove_admin : info_management_member) {\n        if(remove_admin.rid.length === 0)\n            return new Error(\"error : rid must not be empty\");\n        if(remove_admin.uid.length === 0 )\n            return new Error(\"error : id must not be empty\");\n        this.socket.emit(\"remove_admin\", remove_admin);\n    }\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module"}